-- maker-src/pandoc-filters/loadcodeinoutput.hs
{-# LANGUAGE LambdaCase #-}

import Text.Pandoc (Block(CodeBlock,RawBlock,Div,Null), Format(Format))
import Text.Pandoc.JSON (toJSONFilter)
import System.Directory (getCurrentDirectory)
import System.FilePath ((</>))
import Data.Monoid ((<>))
import System.Environment (getArgs)
{-import System.IO (hPutStrLn, stderr)-}
{-import Control.Monad.IO.Class (liftIO)-}

doInclude :: String -> Block -> IO Block
doInclude currentDir cb@(CodeBlock (id_, classes, namevals) _)
  | "output" `elem` classes =
        case lookup "numid" namevals of
          Just num_id -> do
            output_file <- readFile $ currentDir </> "code" </> num_id <> "-code-autogenerated.out"
            return $ CodeBlock (id_, classes, namevals) output_file
          Nothing -> return cb
  | otherwise = return cb
doInclude _ x = return x

checkShowSpaces :: Block -> Block
checkShowSpaces cb@(CodeBlock (_, classes, _) contents)
  | "show_spaces" `elem` classes =
    frame . RawBlock (Format "latex") $
          "\\catcode`@=\\active\n"
       <> "\\def@{\\rotatebox[origin=c]{180}{$\\Rsh$}}\n"
       <> "\\begin{verbatim*}\n"
       <> (unlines . fmap (<>"@") . lines) contents
       <> "\\end{verbatim*}\n"
       <> "\\catcode`@=12\n"
  | otherwise = frame cb
checkShowSpaces x = x

frame :: Block -> Block
frame block = case block of
                CodeBlock (_, classes, _) _
                  | "noframe" `elem` classes -> block
                  | "hidden" `elem` classes  -> Null
                  | otherwise                -> framed
                _ -> block
  where
    framed = Div ("",[],[])
                 [RawBlock (Format "latex") "\\begin{framed}",
                  block,
                  RawBlock (Format "latex") "\\end{framed}"]

main :: IO ()
main = do
  currentDir <- getArgs >>= \case
                               (dir:_) -> pure dir
                               _       -> getCurrentDirectory

  {-print currentDir-}
  toJSONFilter (fmap checkShowSpaces <$> doInclude currentDir)
