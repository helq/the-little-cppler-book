-- app/loadcodeinoutput.hs
import Text.Pandoc.JSON
import System.Directory
import System.FilePath
import Data.Monoid ((<>))
{-import System.IO (hPutStrLn, stderr)-}
{-import Control.Monad.IO.Class (liftIO)-}

doInclude :: Block -> IO Block
doInclude cb@(CodeBlock (id_, classes, namevals) _)
  | "output" `elem` classes =
        case lookup "numid" namevals of
          Just num_id -> do
            currentDir <- getCurrentDirectory
            let basedir = normalise $ currentDir </> ".." </> ".." </> ".."
            output_file <- readFile $ basedir </> "code" </> num_id <> "-code-autogenerated.out"
            return $ CodeBlock (id_, classes, namevals) output_file
          Nothing -> return cb
  | otherwise = return cb
doInclude x = return x

checkShowSpaces :: Block -> Block
checkShowSpaces cb@(CodeBlock (_, classes, _) contents)
  | "show_spaces" `elem` classes =
    frame . RawBlock (Format "latex") $
          "\\catcode`@=\\active\n"
       <> "\\def@{\\rotatebox[origin=c]{180}{$\\Rsh$}}\n"
       <> "\\begin{verbatim*}\n"
       <> (unlines . fmap (<>"@") . lines) contents
       <> "\\end{verbatim*}\n"
       <> "\\catcode`@=12\n"
  | otherwise = frame cb
checkShowSpaces x = x

frame :: Block -> Block
frame block = Div ("",[],[])
                  [RawBlock (Format "latex") "\\begin{framed}",
                   block,
                   RawBlock (Format "latex") "\\end{framed}"]

main :: IO ()
main = toJSONFilter (fmap checkShowSpaces <$> doInclude)
